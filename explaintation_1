How to split a commit into two parts
   
First of all create a new directory:
$ mkdir splitting-commits
$ cd !$
Then:
$ git init
And create a file. I have created a new index.html file.
Then add and commit it:
$ git add .
$ git commit -m "Initial commit"

Let's imagine, that I have bugs there and need to modify it.
$ vim index.html
$ git add .
$ git commit -m "Implement the new feature & fix the bug."4

Okay, but to how to splitr this commit that first commit would be "Implement the new feature" and second "Fix the bug"?
 
For this you need to do:
$ git reset HEAD~
You can see the status of your file:
$ git status
Then see the diffs
$ git diff
 And then, using git add -p command split it into 2 parts:
$ git add -p
then choose letter s for splitting into 2 hunks, save your first hunk choosing letter y, then choose letter e for editing the second hunk,     edit it save and quit.
Then you can commit the first hunk.
$ git commit -m "Implement the new feature."
 
 And see the commits, using this command:
$ git log --oneline
 
And the second commit:
$ git add .
$ git commit -m "Fixed the bugs"
 
And see the 2 splitting commits: 40 $ git log --oneline

As you see, there are two different splitted commits there.

